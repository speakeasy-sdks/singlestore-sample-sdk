// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DuplicationState - Duplication state of the database
type DuplicationState string

const (
	DuplicationStatePending  DuplicationState = "Pending"
	DuplicationStateActive   DuplicationState = "Active"
	DuplicationStateInactive DuplicationState = "Inactive"
	DuplicationStateError    DuplicationState = "Error"
)

func (e DuplicationState) ToPointer() *DuplicationState {
	return &e
}

func (e *DuplicationState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Active":
		fallthrough
	case "Inactive":
		fallthrough
	case "Error":
		*e = DuplicationState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DuplicationState: %v", v)
	}
}

// ReplicatedDatabase - Represents information related to a database's replication status
type ReplicatedDatabase struct {
	// Name of the database
	DatabaseName string `json:"databaseName"`
	// Duplication state of the database
	DuplicationState DuplicationState `json:"duplicationState"`
	// Name of the region
	Region string `json:"region"`
}

func (o *ReplicatedDatabase) GetDatabaseName() string {
	if o == nil {
		return ""
	}
	return o.DatabaseName
}

func (o *ReplicatedDatabase) GetDuplicationState() DuplicationState {
	if o == nil {
		return DuplicationState("")
	}
	return o.DuplicationState
}

func (o *ReplicatedDatabase) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}
