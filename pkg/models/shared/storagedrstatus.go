// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StorageDRState - Status of Storage DR operation
type StorageDRState string

const (
	StorageDRStateActive    StorageDRState = "Active"
	StorageDRStateCompleted StorageDRState = "Completed"
	StorageDRStateFailed    StorageDRState = "Failed"
	StorageDRStateExpired   StorageDRState = "Expired"
	StorageDRStateCanceled  StorageDRState = "Canceled"
)

func (e StorageDRState) ToPointer() *StorageDRState {
	return &e
}

func (e *StorageDRState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Completed":
		fallthrough
	case "Failed":
		fallthrough
	case "Expired":
		fallthrough
	case "Canceled":
		*e = StorageDRState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageDRState: %v", v)
	}
}

// StorageDRType - Name of Storage DR operation
type StorageDRType string

const (
	StorageDRTypeFailover    StorageDRType = "Failover"
	StorageDRTypeFailback    StorageDRType = "Failback"
	StorageDRTypeDrTestStart StorageDRType = "DRTestStart"
	StorageDRTypeDrTestEnd   StorageDRType = "DRTestEnd"
)

func (e StorageDRType) ToPointer() *StorageDRType {
	return &e
}

func (e *StorageDRType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Failover":
		fallthrough
	case "Failback":
		fallthrough
	case "DRTestStart":
		fallthrough
	case "DRTestEnd":
		*e = StorageDRType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageDRType: %v", v)
	}
}

// Compute - Represents information related to a workspace group's latest storage DR operation
type Compute struct {
	// The number of database attachments that have been setup
	CompletedAttachments *int64 `json:"completedAttachments,omitempty"`
	// The number of workspaces that have been setup
	CompletedWorkspaces *int64 `json:"completedWorkspaces,omitempty"`
	// Status of Storage DR operation
	StorageDRState StorageDRState `json:"storageDRState"`
	// Name of Storage DR operation
	StorageDRType StorageDRType `json:"storageDRType"`
	// The total number of database attachments to setup
	TotalAttachments *int64 `json:"totalAttachments,omitempty"`
	// The total number of workspaces to setup
	TotalWorkspaces *int64 `json:"totalWorkspaces,omitempty"`
}

func (o *Compute) GetCompletedAttachments() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedAttachments
}

func (o *Compute) GetCompletedWorkspaces() *int64 {
	if o == nil {
		return nil
	}
	return o.CompletedWorkspaces
}

func (o *Compute) GetStorageDRState() StorageDRState {
	if o == nil {
		return StorageDRState("")
	}
	return o.StorageDRState
}

func (o *Compute) GetStorageDRType() StorageDRType {
	if o == nil {
		return StorageDRType("")
	}
	return o.StorageDRType
}

func (o *Compute) GetTotalAttachments() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalAttachments
}

func (o *Compute) GetTotalWorkspaces() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalWorkspaces
}

// StorageDRStatus - Represents Storage DR status information
type StorageDRStatus struct {
	// Represents information related to a workspace group's latest storage DR operation
	Compute Compute              `json:"compute"`
	Storage []ReplicatedDatabase `json:"storage"`
}

func (o *StorageDRStatus) GetCompute() Compute {
	if o == nil {
		return Compute{}
	}
	return o.Compute
}

func (o *StorageDRStatus) GetStorage() []ReplicatedDatabase {
	if o == nil {
		return []ReplicatedDatabase{}
	}
	return o.Storage
}
