// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/singlestore-sample-sdk/pkg/models/shared"
	"net/http"
)

// AggregateBy - The aggregate type used to group usage which includes hour, day and month. default is hour
type AggregateBy string

const (
	AggregateByHour  AggregateBy = "hour"
	AggregateByDay   AggregateBy = "day"
	AggregateByMonth AggregateBy = "month"
)

func (e AggregateBy) ToPointer() *AggregateBy {
	return &e
}

func (e *AggregateBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		fallthrough
	case "month":
		*e = AggregateBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregateBy: %v", v)
	}
}

// Metric - Metrics include ComputeCredit, StorageAvgByte. default is all
type Metric string

const (
	MetricComputeCredit  Metric = "ComputeCredit"
	MetricStorageAvgByte Metric = "StorageAvgByte"
)

func (e Metric) ToPointer() *Metric {
	return &e
}

func (e *Metric) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ComputeCredit":
		fallthrough
	case "StorageAvgByte":
		*e = Metric(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Metric: %v", v)
	}
}

type ListBillingUsageRequest struct {
	// The end time for the usage interval valid UTC ISO8601 format e.g. 2023-07-30T18:30:00Z
	EndTime string `queryParam:"style=form,explode=true,name=endTime"`
	// The start time for the usage interval in valid UTC ISO8601 format e.g. 2023-07-30T18:30:00Z
	StartTime string `queryParam:"style=form,explode=true,name=startTime"`
	// The aggregate type used to group usage which includes hour, day and month. default is hour
	AggregateBy *AggregateBy `queryParam:"style=form,explode=true,name=aggregateBy"`
	// Metrics include ComputeCredit, StorageAvgByte. default is all
	Metric *Metric `queryParam:"style=form,explode=true,name=metric"`
}

func (o *ListBillingUsageRequest) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

func (o *ListBillingUsageRequest) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *ListBillingUsageRequest) GetAggregateBy() *AggregateBy {
	if o == nil {
		return nil
	}
	return o.AggregateBy
}

func (o *ListBillingUsageRequest) GetMetric() *Metric {
	if o == nil {
		return nil
	}
	return o.Metric
}

type ListBillingUsageResponse struct {
	// OK
	BillingUsage *shared.BillingUsage
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListBillingUsageResponse) GetBillingUsage() *shared.BillingUsage {
	if o == nil {
		return nil
	}
	return o.BillingUsage
}

func (o *ListBillingUsageResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListBillingUsageResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListBillingUsageResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
